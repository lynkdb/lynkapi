// Copyright 2024 Eryx <evorui at gmail dot com>, All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: lynkdb/lynkapi/service.proto

package lynkapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataxService_ApiList_FullMethodName   = "/lynkdb.lynkapi.DataxService/ApiList"
	DataxService_Exec_FullMethodName      = "/lynkdb.lynkapi.DataxService/Exec"
	DataxService_DataQuery_FullMethodName = "/lynkdb.lynkapi.DataxService/DataQuery"
)

// DataxServiceClient is the client API for DataxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataxServiceClient interface {
	ApiList(ctx context.Context, in *ApiListRequest, opts ...grpc.CallOption) (*ApiListResponse, error)
	Exec(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	DataQuery(ctx context.Context, in *DataQuery, opts ...grpc.CallOption) (*DataResult, error)
}

type dataxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataxServiceClient(cc grpc.ClientConnInterface) DataxServiceClient {
	return &dataxServiceClient{cc}
}

func (c *dataxServiceClient) ApiList(ctx context.Context, in *ApiListRequest, opts ...grpc.CallOption) (*ApiListResponse, error) {
	out := new(ApiListResponse)
	err := c.cc.Invoke(ctx, DataxService_ApiList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataxServiceClient) Exec(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DataxService_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataxServiceClient) DataQuery(ctx context.Context, in *DataQuery, opts ...grpc.CallOption) (*DataResult, error) {
	out := new(DataResult)
	err := c.cc.Invoke(ctx, DataxService_DataQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataxServiceServer is the server API for DataxService service.
// All implementations must embed UnimplementedDataxServiceServer
// for forward compatibility
type DataxServiceServer interface {
	ApiList(context.Context, *ApiListRequest) (*ApiListResponse, error)
	Exec(context.Context, *Request) (*Response, error)
	DataQuery(context.Context, *DataQuery) (*DataResult, error)
	mustEmbedUnimplementedDataxServiceServer()
}

// UnimplementedDataxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataxServiceServer struct {
}

func (UnimplementedDataxServiceServer) ApiList(context.Context, *ApiListRequest) (*ApiListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiList not implemented")
}
func (UnimplementedDataxServiceServer) Exec(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedDataxServiceServer) DataQuery(context.Context, *DataQuery) (*DataResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataQuery not implemented")
}
func (UnimplementedDataxServiceServer) mustEmbedUnimplementedDataxServiceServer() {}

// UnsafeDataxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataxServiceServer will
// result in compilation errors.
type UnsafeDataxServiceServer interface {
	mustEmbedUnimplementedDataxServiceServer()
}

func RegisterDataxServiceServer(s grpc.ServiceRegistrar, srv DataxServiceServer) {
	s.RegisterService(&DataxService_ServiceDesc, srv)
}

func _DataxService_ApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataxServiceServer).ApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataxService_ApiList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataxServiceServer).ApiList(ctx, req.(*ApiListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataxService_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataxServiceServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataxService_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataxServiceServer).Exec(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataxService_DataQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataxServiceServer).DataQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataxService_DataQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataxServiceServer).DataQuery(ctx, req.(*DataQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// DataxService_ServiceDesc is the grpc.ServiceDesc for DataxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lynkdb.lynkapi.DataxService",
	HandlerType: (*DataxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiList",
			Handler:    _DataxService_ApiList_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _DataxService_Exec_Handler,
		},
		{
			MethodName: "DataQuery",
			Handler:    _DataxService_DataQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lynkdb/lynkapi/service.proto",
}
